# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  permissions: [UserPermissionType!]
  email: String
  password: PasswordState
  createdAt: DateTime
  discordUsername: String
  publicEmail: String
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
}

enum UserPermissionType {
  ADMIN
  TO
  CAPTAIN
  RESOURCE_EDITOR
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  discordUsername: StringFilter
  publicEmail: StringFilter
  events: EventManyRelationFilter
  resources: ResourceManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  discordUsername: OrderDirection
  publicEmail: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  permissions: [UserPermissionType!]
  email: String
  password: String
  createdAt: DateTime
  discordUsername: String
  publicEmail: String
  events: EventRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  permissions: [UserPermissionType!]
  email: String
  password: String
  createdAt: DateTime
  discordUsername: String
  publicEmail: String
  events: EventRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type Event {
  id: ID!
  name: String
  slug: String
  level: String
  organiser: User
  venue: Venue
  description: Event_description_Document
  date: CalendarDay
  cost: Float
  howToPay: Event_howToPay_Document
  swagDescription: Event_swagDescription_Document
  swagImages: CloudinaryImage_File
  attendees: Event_attendees_Document
  winnerName: String
  winnerPhoto: CloudinaryImage_File
  secondName: String
  secondPhoto: CloudinaryImage_File
  thirdName: String
  thirdPhoto: CloudinaryImage_File
  woodenSpoonName: String
  woodenSpoonPhoto: CloudinaryImage_File
  bestPaintedName: String
  bestPaintedPhoto: CloudinaryImage_File
  bestSportName: String
  bestSportPhoto: CloudinaryImage_File
}

type Event_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Event_howToPay_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_swagDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Event_attendees_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  level: StringFilter
  organiser: UserWhereInput
  venue: VenueWhereInput
  date: CalendarDayNullableFilter
  cost: FloatNullableFilter
  winnerName: StringFilter
  secondName: StringFilter
  thirdName: StringFilter
  woodenSpoonName: StringFilter
  bestPaintedName: StringFilter
  bestSportName: StringFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  level: OrderDirection
  date: OrderDirection
  cost: OrderDirection
  winnerName: OrderDirection
  secondName: OrderDirection
  thirdName: OrderDirection
  woodenSpoonName: OrderDirection
  bestPaintedName: OrderDirection
  bestSportName: OrderDirection
}

input EventUpdateInput {
  name: String
  slug: String
  level: String
  organiser: UserRelateToOneForUpdateInput
  venue: VenueRelateToOneForUpdateInput
  description: JSON
  date: CalendarDay
  cost: Float
  howToPay: JSON
  swagDescription: JSON
  swagImages: Upload
  attendees: JSON
  winnerName: String
  winnerPhoto: Upload
  secondName: String
  secondPhoto: Upload
  thirdName: String
  thirdPhoto: Upload
  woodenSpoonName: String
  woodenSpoonPhoto: Upload
  bestPaintedName: String
  bestPaintedPhoto: Upload
  bestSportName: String
  bestSportPhoto: Upload
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input VenueRelateToOneForUpdateInput {
  create: VenueCreateInput
  connect: VenueWhereUniqueInput
  disconnect: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  slug: String
  level: String
  organiser: UserRelateToOneForCreateInput
  venue: VenueRelateToOneForCreateInput
  description: JSON
  date: CalendarDay
  cost: Float
  howToPay: JSON
  swagDescription: JSON
  swagImages: Upload
  attendees: JSON
  winnerName: String
  winnerPhoto: Upload
  secondName: String
  secondPhoto: Upload
  thirdName: String
  thirdPhoto: Upload
  woodenSpoonName: String
  woodenSpoonPhoto: Upload
  bestPaintedName: String
  bestPaintedPhoto: Upload
  bestSportName: String
  bestSportPhoto: Upload
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input VenueRelateToOneForCreateInput {
  create: VenueCreateInput
  connect: VenueWhereUniqueInput
}

type Venue {
  id: ID!
  name: String
  slug: String
  flgs: Boolean
  url: String
  facebook: String
  instagram: String
  firstLine: String
  secondLine: String
  city: String
  postCode: String
}

input VenueWhereUniqueInput {
  id: ID
  slug: String
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  flgs: BooleanFilter
  url: StringFilter
  facebook: StringFilter
  instagram: StringFilter
  firstLine: StringFilter
  secondLine: StringFilter
  city: StringFilter
  postCode: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input VenueOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  flgs: OrderDirection
  url: OrderDirection
  facebook: OrderDirection
  instagram: OrderDirection
  firstLine: OrderDirection
  secondLine: OrderDirection
  city: OrderDirection
  postCode: OrderDirection
}

input VenueUpdateInput {
  name: String
  slug: String
  flgs: Boolean
  url: String
  facebook: String
  instagram: String
  firstLine: String
  secondLine: String
  city: String
  postCode: String
}

input VenueUpdateArgs {
  where: VenueWhereUniqueInput!
  data: VenueUpdateInput!
}

input VenueCreateInput {
  name: String
  slug: String
  flgs: Boolean
  url: String
  facebook: String
  instagram: String
  firstLine: String
  secondLine: String
  city: String
  postCode: String
}

type Team {
  id: ID!
  name: String
  slug: String
  location: String
  captain: User
  logo: CloudinaryImage_File
  description: Team_description_Document
  discord: String
  facebook: String
  email: String
  members: Team_members_Document
}

type Team_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Team_members_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TeamWhereUniqueInput {
  id: ID
  slug: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  location: StringFilter
  captain: UserWhereInput
  discord: StringFilter
  facebook: StringFilter
  email: StringFilter
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  location: OrderDirection
  discord: OrderDirection
  facebook: OrderDirection
  email: OrderDirection
}

input TeamUpdateInput {
  name: String
  slug: String
  location: String
  captain: UserRelateToOneForUpdateInput
  logo: Upload
  description: JSON
  discord: String
  facebook: String
  email: String
  members: JSON
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  slug: String
  location: String
  captain: UserRelateToOneForCreateInput
  logo: Upload
  description: JSON
  discord: String
  facebook: String
  email: String
  members: JSON
}

type Resource {
  id: ID!
  name: String
  description: String
  content: Resource_content_Document
  author: User
  slug: String
}

type Resource_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ResourceWhereUniqueInput {
  id: ID
  slug: String
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  author: UserWhereInput
  slug: StringFilter
}

input ResourceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  slug: OrderDirection
}

input ResourceUpdateInput {
  name: String
  description: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  slug: String
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  name: String
  description: String
  content: JSON
  author: UserRelateToOneForCreateInput
  slug: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createVenue(data: VenueCreateInput!): Venue
  createVenues(data: [VenueCreateInput!]!): [Venue]
  updateVenue(where: VenueWhereUniqueInput!, data: VenueUpdateInput!): Venue
  updateVenues(data: [VenueUpdateArgs!]!): [Venue]
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  deleteVenues(where: [VenueWhereUniqueInput!]!): [Venue]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(where: ResourceWhereUniqueInput!, data: ResourceUpdateInput!): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  venue(where: VenueWhereUniqueInput!): Venue
  venues(where: VenueWhereInput! = {}, orderBy: [VenueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VenueWhereUniqueInput): [Venue!]
  venuesCount(where: VenueWhereInput! = {}): Int
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput! = {}, orderBy: [TeamOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeamWhereUniqueInput): [Team!]
  teamsCount(where: TeamWhereInput! = {}): Int
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
